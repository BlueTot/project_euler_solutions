PRIME GENERATOR

def primes(n):
    primes = [True]*n
    primes[0] = False
    primes[1] = False
    list_of_primes = set()
    list_of_primes.add(2)

    for num in range(3, n+1, 2):
        if primes[num]:
            list_of_primes.add(num)
            for i in range(num**2, n, num):
                primes[i] = False
    return list_of_primes

PROPER DIVISORS

def proper_divisors(num):
    factors = []
    for factor in range(1, int(num ** 0.5)+1):
        if num % factor == 0 and factor != num:
            factors.append(factor)
            if factor != num / factor and num//factor != num:
                factors.append(num//factor)
    return factors

DISTINCT PRIME FACTORS

def dpf(num):
    factors = set()
    while num % 2 == 0:
        num //= 2
        factors.add(2)
    for factor in range(3, int(sqrt(num))+1, 2):
        while num % factor == 0:
            factors.add(factor)
            num //= factor
    if num > 2:
        factors.add(num)
    return factors

TOTIENT FUNCTION (Req. distinct prime factors)

FORMULA: phi(n) = n(1-1/p1)(1-1/p2)(1-1/p3) * ...

def totient(n):
    product = n
    for num in dpf(n):
        product *= 1 - 1/num
    return round(product)

PALINDROME CHECKER

def is_palindrome(n):
    front, rear = 0, len(n)-1
    while True:
        if n[front] != n[rear]:
            return False
        if front == rear or abs(front - rear) == 1:
            return True
        front += 1
        rear -= 1

PANDIGITAL NUMBER CHECKER

def is_pandigital(num):
    return set(str(num)) == set("123456789")

NUMBER OF FACTORS

from math import sqrt

def primes(n):
    primes = [True]*n
    primes[0] = False
    primes[1] = False
    list_of_primes = set()
    list_of_primes.add(2)

    for num in range(3, n+1, 2):
        if primes[num]:
            list_of_primes.add(num)
            for i in range(num**2, n, num):
                primes[i] = False
    return list_of_primes

ps = primes(10**7)
is_prime = lambda n : n in ps
cache = {}

def join_dicts(d1, d2):
    for k, v in d2.items():
        if k in d1: d1[k] += v
        else: d1[k] = v
    return d1

def dpf(num):
    orig_num = num
    factors = {}
    while num % 2 == 0:
        num //= 2
        if 2 not in factors: factors[2] = 1
        else: factors[2] += 1
    for factor in range(3, int(sqrt(num))+1, 2):
        if num in cache: 
            cache[orig_num] = join_dicts(factors, cache[num])
            return cache[orig_num]
        while num % factor == 0:
            if factor not in factors: factors[factor] = 1
            else: factors[factor] += 1
            num //= factor
    if num > 2: factors[num] = 1
    cache[orig_num] = factors
    return factors

def num_divisors(num):
    product = 1
    for power in dpf(num).values():
        product *= power + 1
    return product